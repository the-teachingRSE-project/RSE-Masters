# WORK IN PROGRESS THIS IS NOT THE OFFICIAL STATEMENT OF THE COMMUNITY BUT THE CURRENT VERSION

# Why a RSE Curriculum?

The term Research Software Engineer, or RSE,
emerged a little over 10 years ago as a way to represent
individuals working in the research community but focusing on software development.
The term has been widely adopted and there are a number of high-level definitions of what an RSE is.
However, the roles of RSEs vary depending on the institutional context they work in.
At one end of the spectrum, RSE roles may look similar to a traditional research role.
At the other extreme, they resemble that of a software engineer in industry.
Most RSE roles inhabit the space between these two extremes.

For the purpose of creating an RSE-Master Programm we identify the RSE as a person who
creates or improves research software and/or the structures that the software interacts with
in the computational environment of a research domain.
In this spectrum we see skilled team member who may also choose to conduct own research as part of their role.
But on the other end we also see paths for an RSE to specifically focus on a technical
role as an alternative to a traditional research role
because they enjoy and wish to focus on the development of research software.

For this task, to support research with/in the creation of digital tools,
we structure this sample curriculum along three pillars [@competencies-F1000]:

- research skills: these are competencies that enable an RSE to effectively participate in the research domain.
- technical skills: these are competencies, that enable an RSE to create effective tools for research
- communication skills: these are skills that enable an RSE to effectively work and communicate with its peers and stakeholders across multiple domains.


# Balancing Computer Science Fundamentals with Application Demands

Research Software Engineering is a fast-growing field and the curriculum should engender the development of both experts
in RSE (Fachexperten), and multidisciplinary researchers that are capable of transferring high-level software-engineering concepts to their respective domains.
This can be mapped to the typology of the German Computer Science Association (GI). [@gi2016empfehlungen] defines computer science programs with a three-fold typology:

- Type 1: Computer Science Programs: Computer Science is solely responsible.
- Type 2: Computer Science Programs with a Specific Application Area: Computer Science is responsible in coordination with the participating application discipline.
- Type 3: Interdisciplinary Programs with a Computer Science Component Equal in Weight to Other Participating Disciplines: Computer Science shares responsibility jointly with the participating disciplines.

Fully qualified computer science experts with a focus on research software fit type 1 of CS programs.
Interdisciplinary researchers where the computer science background is rivalled by the domain expertise fit the type 3.

(At this point) the curriculum tries to support both aspects equally with two branches (or [tracks](https://github.com/the-teachingRSE-project/RSE-Masters/wiki/profiles)) of the curriculum focussing on the different weights. However, both tracks share common modules and concepts such as the idea to teach RSE-specific Open Science Tooling, an advanced Software Engineering module with specific patterns and modelling techniques for RSE and dual-lab and dual-thesis ideas, where RSE-students interface with a domain or industry field to apply their cross-cutting research skills.

You can find the tracks as follows:

- Computer Science Generalist Track [here](/generation/generated/cs_curriculum.qmd)
- Natural Science / Domain Science Track [here](/generation/generated/mnt_curriculum.qmd)


The RSE community has long used the three pillar structure for RSE specific skills. These are distributed in the
modules as following:

## Research skills

Implemented in the following components:

- [Domain Science Project](generation/generated/mnt_project.qmd)
- [Domain Science Wildcard Courses](generation/generated/mnt_wildcard.qmd)
- [RSE Thesis](rse_thesis)

## Technical skills

Implemented in:

- [Data Science Foundations](generation/generated/gen_datascience.qmd)
- [Programming Foundations](generation/generated/gen_programming.qmd)
- [Software Engineering Foundations](generation/generated/gen_softwareengineering.qmd)
- [RSE Software Engineering](generation/generated/rse_softwareengineering.qmd)

## Communication skills

Implemented in:

- [RSE Management](generation/generated/rse_management.qmd)
- [Domain Science Project](generation/generated/mnt_project.qmd)
- [RSE Theory](generation/generated/rse_theory.qmd)




::: {.content-visible when-format="html"}

# References

::: {#refs}
:::

:::